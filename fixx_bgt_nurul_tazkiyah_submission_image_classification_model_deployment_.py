# -*- coding: utf-8 -*-
"""fixx bgt Nurul Tazkiyah Submission Image  Classification Model Deployment .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CVNDasUBe9ewB49FN61eLbja9sr4H4_3

## **Image Classification Model Deployment Oleh Nurul Tazkiyah Adam**
"""

# memastikan tensorflow yang digunakan versi 2 atau lebih
import tensorflow as tf
print(tf.__version__)

! pip install -q kaggle

from google.colab import files

files.upload()

!chmod 600 /content/kaggle.json

! KAGGLE_CONFIG_DIR=/content/ kaggle datasets download -d iarunava/cell-images-for-detecting-malaria

import os, zipfile
local_zip = '/content/cell-images-for-detecting-malaria.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/content') #unzip atau mengekstrak file zip dataset
zip_ref.close()

os.remove("/content/cell_images/Parasitized/Thumbs.db")
os.remove("/content/cell_images/Uninfected/Thumbs.db")
os.remove("/content/cell_images/cell_images/Parasitized/Thumbs.db")
os.remove("/content/cell_images/cell_images/Uninfected/Thumbs.db")

base_dir = '/content/cell_images'

import PIL

#untuk mengetahui ukuran size gambar pada dataset berbeda-beda 

def read_files(startpath):
  image_files = []
  for dirname, dirnames, filenames in os.walk(startpath):
    for filename in filenames:
      image_files.append(os.path.join(dirname, filename))
  
  return image_files

full_dirs = read_files(base_dir)
image_sizes = []
for file in full_dirs:
  image = PIL.Image.open(file)
  width, height = image.size
  image_sizes.append(f'{width}x{height}')

unique_sizes = set(image_sizes)

print(f'Size all images: {len(image_sizes)}')
print(f'Size unique images: {len(unique_sizes)}')
print(f'First 10 unique images: \n{list(unique_sizes)[:10]}')

import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator

IDG = ImageDataGenerator(
  rescale=1./255, # membagi ke ukuran pixel terkecil kemudian augmentasi
  validation_split=0.2, # membagi ke ukuran pixel terkecil kemudian augmentasi
  zoom_range=0.2,
  shear_range=0.2,
  rotation_range=0.2
)

training_generator = IDG.flow_from_directory(
  base_dir,
  subset='training',
  target_size=(150,150),
  seed=42,
  batch_size=64,
  interpolation='nearest',
  class_mode='binary',
  classes= ['Parasitized','Uninfected']
)

validation_generator = IDG.flow_from_directory(
  base_dir,
  subset='validation',
  target_size=(150,150),
  seed=42,
  batch_size=64,
  interpolation='nearest',
  class_mode='binary',
  classes= ['Parasitized','Uninfected']
)

from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.layers import Input

base_model = tf.keras.applications.MobileNetV2(
    weights='imagenet',
    input_shape=(150, 150, 3),
    include_top=False
)

base_model.trainable = True

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(64, (3,3), activation='relu', input_shape=(150, 150, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Dropout(0.6),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(256, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Dropout(0.4),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dropout(0.2),
    tf.keras.layers.Dense(1, activation = 'sigmoid')
])


model.summary()

from tensorflow.keras.optimizers import RMSprop

model.compile(loss='binary_crossentropy',
              optimizer=RMSprop(learning_rate=0.0001),
              metrics=['accuracy'])

class berhenti(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if((logs.get('accuracy') > 0.92) and (logs.get('val_accuracy') > 0.92)):
      print('\nalhamdulillah akurasi mencapai 92%')
      self.model.stop_training = True
iniCallback = berhenti()

history = model.fit(training_generator,
                    epochs=100,                  
                    validation_data = validation_generator,
                    verbose=1,
                    callbacks=[iniCallback])

import matplotlib.pyplot as plt

acc = history.history['accuracy']
val_acc = history.history['val_accuracy']
loss = history.history['loss']
val_loss = history.history['val_loss']

epochs_range = range(len(acc))

plt.figure(figsize=(20, 8))

plt.subplot(1, 2, 1)
plt.plot(epochs_range, acc, label='Training Accuracy')
plt.plot(epochs_range, val_acc, label='Validation accuracy')
plt.legend(loc='lower right')
plt.title('Training and Validation Accuracy')

plt.subplot(1, 2, 2)
plt.plot(epochs_range, loss, label='Training Loss')
plt.plot(epochs_range, val_loss, label='Validation Loss')
plt.legend(loc='upper right')
plt.title('Training and Validation Loss')

plt.show()

import warnings

warnings.filterwarnings('ignore') # Menghilangkan Warning

# Convert model
converter = tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model = converter.convert()

# Save the model.
with tf.io.gfile.GFile('model.tflite', 'wb') as f:
  f.write(tflite_model)

from google.colab import files

# Download the flower model
files.download('/content/model.tflite')

print('`model.tflite` has been downloaded')

"""## Referensi


1.   [dwinuragustina-ImageClassificationModelDeployment](https://github.com/dwinuragustina/ImageClassificationModelDeployment/blob/main/Image%20Classification%20Model%20Deployment.ipynb)
2.   [AzharRizky-Image-Classification-Model-Deployment](https://github.com/AzharRizky/Image-Classification-Model-Deployment/blob/main/Submission%20Akhir%20-%20Image%20Classification%20Model%20Deployment.ipynb)
3.   [ridwanabdiansah29-Submission-Dicoding-Image-Classification-Model-Deployment](https://github.com/ridwanabdiansah29/Submission-Dicoding-Image-Classification-Model-Deployment/blob/main/RIDWAN_ABDIANSAH_M193X0386_M06_IMAGECLASSIFICATIONDEPLOYMENT.ipynb)
4.   [hazmicokro-Image-Classification-Rock-Paper-Scissors-with-Model-Deployment](https://github.com/hazmicokro/Image-Classification-Rock-Paper-Scissors-with-Model-Deployment/blob/main/Submission_Akhir_RPS_BPML_Hazmi_Cokro.ipynb)
5.   [diniramdhni-Image-Classification-Model-Deployment](https://github.com/diniramdhni/Image-Classification-Model-Deployment/blob/main/Copy_of_Proyek_Dicoding_Image_Classification_Model_Deployment_.ipynb)



"""